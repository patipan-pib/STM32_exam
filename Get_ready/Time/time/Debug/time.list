
time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e8  080045e8  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045ec  080045ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080045f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000064  08004654  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004654  0000630c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f290  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e62  00000000  00000000  00015322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00017188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a32  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c43  00000000  00000000  000188ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f19  00000000  00000000  000404fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb721  00000000  00000000  00051416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cb37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba8  00000000  00000000  0014cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00150724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	0800456c 	.word	0x0800456c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	0800456c 	.word	0x0800456c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d4:	f000 fa5e 	bl	8000a94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fc1f 	bl	8000e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f8a0 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9e0 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e4:	f000 f95e 	bl	80008a4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80005e8:	f000 f908 	bl	80007fc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80005f0:	483f      	ldr	r0, [pc, #252]	@ (80006f0 <main+0x120>)
 80005f2:	f002 f95f 	bl	80028b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80005f6:	483f      	ldr	r0, [pc, #252]	@ (80006f4 <main+0x124>)
 80005f8:	f002 f95c 	bl	80028b4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == true){
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	483d      	ldr	r0, [pc, #244]	@ (80006f8 <main+0x128>)
 8000602:	f000 ff9d 	bl	8001540 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d102      	bne.n	8000612 <main+0x42>
	  		  btn_bool = true;
 800060c:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <main+0x12c>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
	  }

	  if (flag){
 8000612:	4b3b      	ldr	r3, [pc, #236]	@ (8000700 <main+0x130>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f0      	beq.n	80005fc <main+0x2c>

		  if (btn_bool == 0) {
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <main+0x12c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d122      	bne.n	8000668 <main+0x98>
			  if (num == 3031){
 8000622:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <main+0x134>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f640 32d7 	movw	r2, #3031	@ 0xbd7
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <main+0x6c>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"STOP\r\n", 6, 100);
 800062e:	2364      	movs	r3, #100	@ 0x64
 8000630:	2206      	movs	r2, #6
 8000632:	4935      	ldr	r1, [pc, #212]	@ (8000708 <main+0x138>)
 8000634:	4835      	ldr	r0, [pc, #212]	@ (800070c <main+0x13c>)
 8000636:	f002 fdef 	bl	8003218 <HAL_UART_Transmit>
				  break;
 800063a:	e055      	b.n	80006e8 <main+0x118>
			  }
			  sprintf(buffer, "%d\r\n", num);
 800063c:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <main+0x134>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4933      	ldr	r1, [pc, #204]	@ (8000710 <main+0x140>)
 8000644:	4833      	ldr	r0, [pc, #204]	@ (8000714 <main+0x144>)
 8000646:	f003 faf1 	bl	8003c2c <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, sizeof(buffer), 100);
 800064a:	2364      	movs	r3, #100	@ 0x64
 800064c:	2214      	movs	r2, #20
 800064e:	4931      	ldr	r1, [pc, #196]	@ (8000714 <main+0x144>)
 8000650:	482e      	ldr	r0, [pc, #184]	@ (800070c <main+0x13c>)
 8000652:	f002 fde1 	bl	8003218 <HAL_UART_Transmit>
			  num += 2;
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0x134>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3302      	adds	r3, #2
 800065c:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <main+0x134>)
 800065e:	6013      	str	r3, [r2, #0]
			  flag = false;
 8000660:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <main+0x130>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e7c9      	b.n	80005fc <main+0x2c>
		  } else if (btn_bool == 1){
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <main+0x12c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1c5      	bne.n	80005fc <main+0x2c>
			  switch (n){
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <main+0x148>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d022      	beq.n	80006be <main+0xee>
 8000678:	2b03      	cmp	r3, #3
 800067a:	dcbf      	bgt.n	80005fc <main+0x2c>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d002      	beq.n	8000686 <main+0xb6>
 8000680:	2b02      	cmp	r3, #2
 8000682:	d00e      	beq.n	80006a2 <main+0xd2>
 8000684:	e02f      	b.n	80006e6 <main+0x116>
			  	  case 1 :
			  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	4824      	ldr	r0, [pc, #144]	@ (800071c <main+0x14c>)
 800068c:	f000 ff70 	bl	8001570 <HAL_GPIO_WritePin>
			  		  n++;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <main+0x148>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <main+0x148>)
 8000698:	6013      	str	r3, [r2, #0]
			  		  flag = false;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <main+0x130>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
			  		  break;
 80006a0:	e021      	b.n	80006e6 <main+0x116>
			  	  case 2 :
			  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	481d      	ldr	r0, [pc, #116]	@ (800071c <main+0x14c>)
 80006a8:	f000 ff62 	bl	8001570 <HAL_GPIO_WritePin>
			  		  flag = false;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <main+0x130>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
			  		  n++;
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <main+0x148>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <main+0x148>)
 80006ba:	6013      	str	r3, [r2, #0]
			  		  break;
 80006bc:	e013      	b.n	80006e6 <main+0x116>
			  	  case 3 :
			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	4816      	ldr	r0, [pc, #88]	@ (800071c <main+0x14c>)
 80006c4:	f000 ff54 	bl	8001570 <HAL_GPIO_WritePin>
			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	@ 0x80
 80006cc:	4813      	ldr	r0, [pc, #76]	@ (800071c <main+0x14c>)
 80006ce:	f000 ff4f 	bl	8001570 <HAL_GPIO_WritePin>
			  		btn_bool = 0;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <main+0x12c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			  		n = 1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <main+0x148>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
			  		flag = false;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <main+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
			  		break;
 80006e4:	bf00      	nop
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == true){
 80006e6:	e789      	b.n	80005fc <main+0x2c>
 80006e8:	2300      	movs	r3, #0
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
//	  HAL_Delay(1000);

  }
  /* USER CODE END 3 */
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	40020800 	.word	0x40020800
 80006fc:	20000084 	.word	0x20000084
 8000700:	20000080 	.word	0x20000080
 8000704:	20000000 	.word	0x20000000
 8000708:	08004584 	.word	0x08004584
 800070c:	20000134 	.word	0x20000134
 8000710:	0800458c 	.word	0x0800458c
 8000714:	20000088 	.word	0x20000088
 8000718:	20000004 	.word	0x20000004
 800071c:	40020400 	.word	0x40020400

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	@ 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fa9c 	bl	8003c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a2a      	ldr	r2, [pc, #168]	@ (80007f4 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <SystemClock_Config+0xd8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800078c:	23d8      	movs	r3, #216	@ 0xd8
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 ff73 	bl	800168c <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007ac:	f000 f99e 	bl	8000aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b0:	f000 ff1c 	bl	80015ec <HAL_PWREx_EnableOverDrive>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ba:	f000 f997 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2107      	movs	r1, #7
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fa03 	bl	8001be8 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007e8:	f000 f980 	bl	8000aec <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	@ 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_TIM1_Init+0xa0>)
 800081c:	4a20      	ldr	r2, [pc, #128]	@ (80008a0 <MX_TIM1_Init+0xa4>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000822:	f245 425f 	movw	r2, #21599	@ 0x545f
 8000826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_TIM1_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000830:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_TIM1_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000848:	4814      	ldr	r0, [pc, #80]	@ (800089c <MX_TIM1_Init+0xa0>)
 800084a:	f001 ffdb 	bl	8002804 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 f94a 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000866:	f002 f9a5 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000870:	f000 f93c 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_TIM1_Init+0xa0>)
 8000886:	f002 fbcd 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000890:	f000 f92c 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	40010000 	.word	0x40010000

080008a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <MX_TIM2_Init+0x98>)
 80008c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <MX_TIM2_Init+0x98>)
 80008cc:	f240 4237 	movw	r2, #1079	@ 0x437
 80008d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_TIM2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_TIM2_Init+0x98>)
 80008da:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <MX_TIM2_Init+0x9c>)
 80008dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_TIM2_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_TIM2_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ea:	4814      	ldr	r0, [pc, #80]	@ (800093c <MX_TIM2_Init+0x98>)
 80008ec:	f001 ff8a 	bl	8002804 <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008f6:	f000 f8f9 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_TIM2_Init+0x98>)
 8000908:	f002 f954 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000912:	f000 f8eb 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <MX_TIM2_Init+0x98>)
 8000924:	f002 fb7e 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800092e:	f000 f8dd 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000e8 	.word	0x200000e8
 8000940:	0001869f 	.word	0x0001869f

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART3_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000988:	f002 fbf8 	bl	800317c <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f8ab 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000134 	.word	0x20000134
 80009a0:	40004800 	.word	0x40004800

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a27      	ldr	r2, [pc, #156]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <MX_GPIO_Init+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2181      	movs	r1, #129	@ 0x81
 8000a06:	4816      	ldr	r0, [pc, #88]	@ (8000a60 <MX_GPIO_Init+0xbc>)
 8000a08:	f000 fdb2 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <MX_GPIO_Init+0xc0>)
 8000a24:	f000 fbe0 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000a28:	2381      	movs	r3, #129	@ 0x81
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0xbc>)
 8000a40:	f000 fbd2 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2103      	movs	r1, #3
 8000a48:	2028      	movs	r0, #40	@ 0x28
 8000a4a:	f000 fb1e 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4e:	2028      	movs	r0, #40	@ 0x28
 8000a50:	f000 fb37 	bl	80010c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800

08000a68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d102      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x18>
//        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
        flag = true;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
    }
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	20000080 	.word	0x20000080

08000a94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aa6:	f000 fb27 	bl	80010f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aba:	2387      	movs	r3, #135	@ 0x87
 8000abc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fb45 	bl	8001168 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f000 fb22 	bl	8001128 <HAL_MPU_Enable>

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f000 faa0 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <HAL_TIM_Base_MspInit+0x78>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d114      	bne.n	8000b7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f000 fa8b 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 faa4 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b7a:	e018      	b.n	8000bae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b84:	d113      	bne.n	8000bae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_TIM_Base_MspInit+0x7c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	201c      	movs	r0, #28
 8000ba4:	f000 fa71 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f000 fa8a 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2290      	movs	r2, #144	@ 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f843 	bl	8003c6c <memset>
  if(huart->Instance==USART3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <HAL_UART_MspInit+0xb4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d13c      	bne.n	8000c6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f9d8 	bl	8001fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0a:	f7ff ff6f 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_UART_MspInit+0xb8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_UART_MspInit+0xbc>)
 8000c66:	f000 fabf 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	37b8      	adds	r7, #184	@ 0xb8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8dd 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ce6:	f001 fe5d 	bl	80029a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000009c 	.word	0x2000009c

08000cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <TIM2_IRQHandler+0x10>)
 8000cfa:	f001 fe53 	bl	80029a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000e8 	.word	0x200000e8

08000d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET){
 8000d0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d10:	4807      	ldr	r0, [pc, #28]	@ (8000d30 <EXTI15_10_IRQHandler+0x28>)
 8000d12:	f000 fc15 	bl	8001540 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <EXTI15_10_IRQHandler+0x1a>
		  btn_bool = 1;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <EXTI15_10_IRQHandler+0x2c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
	  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d22:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d26:	f000 fc3d 	bl	80015a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020800 	.word	0x40020800
 8000d34:	20000084 	.word	0x20000084

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f002 ff88 	bl	8003c7c <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20080000 	.word	0x20080000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200001bc 	.word	0x200001bc
 8000da0:	20000310 	.word	0x20000310

08000da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f002 ff47 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fbe9 	bl	80005d0 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e0c:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8000e10:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e14:	2000030c 	.word	0x2000030c

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>

08000e1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f928 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 f805 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2a:	f7ff fe65 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f943 	bl	80010de <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f90b 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	@ (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	2000000c 	.word	0x2000000c

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	200001c0 	.word	0x200001c0

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200001c0 	.word	0x200001c0

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <__NVIC_SetPriorityGrouping+0x40>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00
 8000f18:	05fa0000 	.word	0x05fa0000

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010fc:	f3bf 8f5f 	dmb	sy
}
 8001100:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_MPU_Disable+0x28>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001106:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_MPU_Disable+0x28>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_MPU_Disable+0x2c>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	e000ed90 	.word	0xe000ed90

08001128 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001130:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <HAL_MPU_Enable+0x38>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_MPU_Enable+0x3c>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	4a09      	ldr	r2, [pc, #36]	@ (8001164 <HAL_MPU_Enable+0x3c>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001144:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001146:	f3bf 8f4f 	dsb	sy
}
 800114a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800114c:	f3bf 8f6f 	isb	sy
}
 8001150:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed90 	.word	0xe000ed90
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	785a      	ldrb	r2, [r3, #1]
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001176:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_MPU_ConfigRegion+0x7c>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a19      	ldr	r2, [pc, #100]	@ (80011e4 <HAL_MPU_ConfigRegion+0x7c>)
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7b1b      	ldrb	r3, [r3, #12]
 8001190:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7adb      	ldrb	r3, [r3, #11]
 8001196:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7a9b      	ldrb	r3, [r3, #10]
 800119e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b5b      	ldrb	r3, [r3, #13]
 80011a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b9b      	ldrb	r3, [r3, #14]
 80011ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7bdb      	ldrb	r3, [r3, #15]
 80011b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7a5b      	ldrb	r3, [r3, #9]
 80011be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7a1b      	ldrb	r3, [r3, #8]
 80011c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d4:	6113      	str	r3, [r2, #16]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed90 	.word	0xe000ed90

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e175      	b.n	80014f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 8164 	bne.w	80014ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x56>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80be 	beq.w	80014ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b66      	ldr	r3, [pc, #408]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a65      	ldr	r2, [pc, #404]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b63      	ldr	r3, [pc, #396]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138a:	4a61      	ldr	r2, [pc, #388]	@ (8001510 <HAL_GPIO_Init+0x328>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a58      	ldr	r2, [pc, #352]	@ (8001514 <HAL_GPIO_Init+0x32c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d037      	beq.n	8001426 <HAL_GPIO_Init+0x23e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <HAL_GPIO_Init+0x330>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x23a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a56      	ldr	r2, [pc, #344]	@ (800151c <HAL_GPIO_Init+0x334>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x236>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a55      	ldr	r2, [pc, #340]	@ (8001520 <HAL_GPIO_Init+0x338>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x232>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a54      	ldr	r2, [pc, #336]	@ (8001524 <HAL_GPIO_Init+0x33c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x22e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a53      	ldr	r2, [pc, #332]	@ (8001528 <HAL_GPIO_Init+0x340>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x22a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_GPIO_Init+0x344>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	@ (8001530 <HAL_GPIO_Init+0x348>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	@ (8001534 <HAL_GPIO_Init+0x34c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <HAL_GPIO_Init+0x350>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x21a>
 80013fe:	2309      	movs	r3, #9
 8001400:	e012      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001402:	230a      	movs	r3, #10
 8001404:	e010      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001406:	2308      	movs	r3, #8
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140a:	2307      	movs	r3, #7
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	@ (8001510 <HAL_GPIO_Init+0x328>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_GPIO_Init+0x354>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146a:	4a34      	ldr	r2, [pc, #208]	@ (800153c <HAL_GPIO_Init+0x354>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_GPIO_Init+0x354>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001494:	4a29      	ldr	r2, [pc, #164]	@ (800153c <HAL_GPIO_Init+0x354>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <HAL_GPIO_Init+0x354>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014be:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <HAL_GPIO_Init+0x354>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_GPIO_Init+0x354>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e8:	4a14      	ldr	r2, [pc, #80]	@ (800153c <HAL_GPIO_Init+0x354>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae86 	bls.w	8001208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	@ 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40022000 	.word	0x40022000
 8001538:	40022400 	.word	0x40022400
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e001      	b.n	8001562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f806 	bl	80015d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_PWREx_EnableOverDrive+0x98>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <HAL_PWREx_EnableOverDrive+0x98>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_PWREx_EnableOverDrive+0x98>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001618:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161a:	f7ff fc4f 	bl	8000ebc <HAL_GetTick>
 800161e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001620:	e009      	b.n	8001636 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001622:	f7ff fc4b 	bl	8000ebc <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001630:	d901      	bls.n	8001636 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e022      	b.n	800167c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001642:	d1ee      	bne.n	8001622 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff fc34 	bl	8000ebc <HAL_GetTick>
 8001654:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001656:	e009      	b.n	800166c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001658:	f7ff fc30 	bl	8000ebc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001666:	d901      	bls.n	800166c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e007      	b.n	800167c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001678:	d1ee      	bne.n	8001658 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e29b      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4b96      	ldr	r3, [pc, #600]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016bc:	4b93      	ldr	r3, [pc, #588]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x62>
 80016c8:	4b90      	ldr	r3, [pc, #576]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b8d      	ldr	r3, [pc, #564]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06c      	beq.n	80017bc <HAL_RCC_OscConfig+0x130>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d168      	bne.n	80017bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e275      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x7a>
 80016f8:	4b84      	ldr	r3, [pc, #528]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a83      	ldr	r2, [pc, #524]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0xd8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x9c>
 800170e:	4b7f      	ldr	r3, [pc, #508]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7e      	ldr	r2, [pc, #504]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b7c      	ldr	r3, [pc, #496]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7b      	ldr	r2, [pc, #492]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xd8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0xc0>
 8001732:	4b76      	ldr	r3, [pc, #472]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a75      	ldr	r2, [pc, #468]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b73      	ldr	r3, [pc, #460]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a72      	ldr	r2, [pc, #456]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xd8>
 800174c:	4b6f      	ldr	r3, [pc, #444]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6e      	ldr	r2, [pc, #440]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b6c      	ldr	r3, [pc, #432]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a6b      	ldr	r2, [pc, #428]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fba6 	bl	8000ebc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fba2 	bl	8000ebc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e229      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b61      	ldr	r3, [pc, #388]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xe8>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb92 	bl	8000ebc <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb8e 	bl	8000ebc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	@ 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e215      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b57      	ldr	r3, [pc, #348]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x110>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d069      	beq.n	800189e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b50      	ldr	r3, [pc, #320]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b4d      	ldr	r3, [pc, #308]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x190>
 80017e2:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x17a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1e9      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	493d      	ldr	r1, [pc, #244]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e040      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b39      	ldr	r3, [pc, #228]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a38      	ldr	r2, [pc, #224]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb44 	bl	8000ebc <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fb40 	bl	8000ebc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1c7      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b30      	ldr	r3, [pc, #192]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4929      	ldr	r1, [pc, #164]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fb20 	bl	8000ebc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fb1c 	bl	8000ebc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1a3      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d038      	beq.n	800191c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d019      	beq.n	80018e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b6:	4a15      	ldr	r2, [pc, #84]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff fafd 	bl	8000ebc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff faf9 	bl	8000ebc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e180      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x23a>
 80018e4:	e01a      	b.n	800191c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_RCC_OscConfig+0x280>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fae3 	bl	8000ebc <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fadf 	bl	8000ebc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d903      	bls.n	8001910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e166      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
 800190c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a4 	beq.w	8001a72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b89      	ldr	r3, [pc, #548]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a88      	ldr	r2, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b86      	ldr	r3, [pc, #536]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	4b83      	ldr	r3, [pc, #524]	@ (8001b60 <HAL_RCC_OscConfig+0x4d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800195e:	4b80      	ldr	r3, [pc, #512]	@ (8001b60 <HAL_RCC_OscConfig+0x4d4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7f      	ldr	r2, [pc, #508]	@ (8001b60 <HAL_RCC_OscConfig+0x4d4>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff faa7 	bl	8000ebc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff faa3 	bl	8000ebc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	@ 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e12a      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <HAL_RCC_OscConfig+0x4d4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x31a>
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199c:	4a6f      	ldr	r2, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_OscConfig+0x376>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x33c>
 80019ae:	4b6b      	ldr	r3, [pc, #428]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ba:	4b68      	ldr	r3, [pc, #416]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019be:	4a67      	ldr	r2, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c6:	e01c      	b.n	8001a02 <HAL_RCC_OscConfig+0x376>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x35e>
 80019d0:	4b62      	ldr	r3, [pc, #392]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d4:	4a61      	ldr	r2, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6713      	str	r3, [r2, #112]	@ 0x70
 80019dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e0:	4a5e      	ldr	r2, [pc, #376]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x376>
 80019ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a58      	ldr	r2, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa57 	bl	8000ebc <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa53 	bl	8000ebc <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0d8      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCC_OscConfig+0x386>
 8001a34:	e014      	b.n	8001a60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa41 	bl	8000ebc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fa3d 	bl	8000ebc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0c2      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80ae 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d06d      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d14b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fa0e 	bl	8000ebc <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fa0a 	bl	8000ebc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e091      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	019b      	lsls	r3, r3, #6
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	3b01      	subs	r3, #1
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	071b      	lsls	r3, r3, #28
 8001aee:	491b      	ldr	r1, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f9dc 	bl	8000ebc <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f9d8 	bl	8000ebc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e05f      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x47c>
 8001b26:	e057      	b.n	8001bd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9c2 	bl	8000ebc <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f9be 	bl	8000ebc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e045      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4b0>
 8001b5a:	e03d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x54c>
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_RCC_OscConfig+0x558>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d129      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d122      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d119      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0d0      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b6a      	ldr	r3, [pc, #424]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b67      	ldr	r3, [pc, #412]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	4965      	ldr	r1, [pc, #404]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e073      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4936      	ldr	r1, [pc, #216]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f8ee 	bl	8000ebc <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f8ea 	bl	8000ebc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e053      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d210      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 020f 	bic.w	r2, r3, #15
 8001d22:	4922      	ldr	r1, [pc, #136]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	@ (8001db4 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1d0>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1d4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f84a 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08004594 	.word	0x08004594
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	2000000c 	.word	0x2000000c

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b090      	sub	sp, #64	@ 0x40
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80a1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e09b      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001df6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001df8:	e09b      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001dfe:	e098      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b4f      	ldr	r3, [pc, #316]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e2c:	fb03 f201 	mul.w	r2, r3, r1
 8001e30:	2300      	movs	r3, #0
 8001e32:	fb00 f303 	mul.w	r3, r0, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	4a43      	ldr	r2, [pc, #268]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e40:	460a      	mov	r2, r1
 8001e42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e46:	4413      	add	r3, r2
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	61fa      	str	r2, [r7, #28]
 8001e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e5a:	f7fe fa41 	bl	80002e0 <__aeabi_uldivmod>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4613      	mov	r3, r2
 8001e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e66:	e053      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e68:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	2200      	movs	r2, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	617a      	str	r2, [r7, #20]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e7a:	f04f 0b00 	mov.w	fp, #0
 8001e7e:	4652      	mov	r2, sl
 8001e80:	465b      	mov	r3, fp
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	0159      	lsls	r1, r3, #5
 8001e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e90:	0150      	lsls	r0, r2, #5
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	ebb2 080a 	subs.w	r8, r2, sl
 8001e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8001eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	00eb      	lsls	r3, r5, #3
 8001ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec8:	00e2      	lsls	r2, r4, #3
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	eb14 030a 	adds.w	r3, r4, sl
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	eb45 030b 	adc.w	r3, r5, fp
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efa:	2200      	movs	r2, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f04:	f7fe f9ec 	bl	80002e0 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3740      	adds	r7, #64	@ 0x40
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	017d7840 	.word	0x017d7840

08001f4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	080045a4 	.word	0x080045a4

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f90:	f7ff ffdc 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0b5b      	lsrs	r3, r3, #13
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	080045a4 	.word	0x080045a4

08001fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d012      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fdc:	4b69      	ldr	r3, [pc, #420]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a68      	ldr	r2, [pc, #416]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001fe6:	6093      	str	r3, [r2, #8]
 8001fe8:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	4964      	ldr	r1, [pc, #400]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d017      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002014:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201c:	4959      	ldr	r1, [pc, #356]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800202c:	d101      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d017      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204a:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002050:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	494a      	ldr	r1, [pc, #296]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 808b 	beq.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4a39      	ldr	r2, [pc, #228]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a4:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b0:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7fe fefe 	bl	8000ebc <HAL_GetTick>
 80020c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7fe fefa 	bl	8000ebc <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	@ 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e38f      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e2:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d035      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d02e      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002100:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002108:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002114:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a1a      	ldr	r2, [pc, #104]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002128:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d114      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe fec2 	bl	8000ebc <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	e00a      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7fe febe 	bl	8000ebc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e351      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ee      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800216a:	d111      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800217a:	400b      	ands	r3, r1
 800217c:	4901      	ldr	r1, [pc, #4]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
 8002182:	e00b      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000
 800218c:	0ffffcff 	.word	0x0ffffcff
 8002190:	4bac      	ldr	r3, [pc, #688]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4aab      	ldr	r2, [pc, #684]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	4ba9      	ldr	r3, [pc, #676]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	49a6      	ldr	r1, [pc, #664]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021ba:	4ba2      	ldr	r3, [pc, #648]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c0:	4aa0      	ldr	r2, [pc, #640]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d4:	499b      	ldr	r1, [pc, #620]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e8:	4b96      	ldr	r3, [pc, #600]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021f6:	4993      	ldr	r1, [pc, #588]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800220a:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002210:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002218:	498a      	ldr	r1, [pc, #552]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800222c:	4b85      	ldr	r3, [pc, #532]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223a:	4982      	ldr	r1, [pc, #520]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800224e:	4b7d      	ldr	r3, [pc, #500]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	4979      	ldr	r1, [pc, #484]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002270:	4b74      	ldr	r3, [pc, #464]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4971      	ldr	r1, [pc, #452]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002292:	4b6c      	ldr	r3, [pc, #432]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002298:	f023 020c 	bic.w	r2, r3, #12
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	4968      	ldr	r1, [pc, #416]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b4:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4960      	ldr	r1, [pc, #384]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e4:	4957      	ldr	r1, [pc, #348]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022f8:	4b52      	ldr	r3, [pc, #328]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002306:	494f      	ldr	r1, [pc, #316]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4946      	ldr	r1, [pc, #280]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800233c:	4b41      	ldr	r3, [pc, #260]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002342:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	493e      	ldr	r1, [pc, #248]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002364:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236c:	4935      	ldr	r1, [pc, #212]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002380:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800238e:	492d      	ldr	r1, [pc, #180]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023a2:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023b0:	4924      	ldr	r1, [pc, #144]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e2:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f0:	4914      	ldr	r1, [pc, #80]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002414:	490b      	ldr	r1, [pc, #44]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002438:	4902      	ldr	r1, [pc, #8]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002440:	e002      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002454:	4b8a      	ldr	r3, [pc, #552]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800245a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	4986      	ldr	r1, [pc, #536]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002478:	4b81      	ldr	r3, [pc, #516]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002488:	497d      	ldr	r1, [pc, #500]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d006      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80d6 	beq.w	8002650 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024a4:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a75      	ldr	r2, [pc, #468]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fd04 	bl	8000ebc <HAL_GetTick>
 80024b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024b8:	f7fe fd00 	bl	8000ebc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e195      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d021      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ea:	4b65      	ldr	r3, [pc, #404]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024f8:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fe:	0e1b      	lsrs	r3, r3, #24
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4958      	ldr	r1, [pc, #352]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02e      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002550:	d129      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002552:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002560:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002566:	0f1b      	lsrs	r3, r3, #28
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	019a      	lsls	r2, r3, #6
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	071b      	lsls	r3, r3, #28
 8002586:	493e      	ldr	r1, [pc, #248]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800258e:	4b3c      	ldr	r3, [pc, #240]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002594:	f023 021f 	bic.w	r2, r3, #31
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	3b01      	subs	r3, #1
 800259e:	4938      	ldr	r1, [pc, #224]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025b2:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b8:	0e1b      	lsrs	r3, r3, #24
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c6:	0f1b      	lsrs	r3, r3, #28
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	019a      	lsls	r2, r3, #6
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	431a      	orrs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	4926      	ldr	r1, [pc, #152]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d011      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	019a      	lsls	r2, r3, #6
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	491a      	ldr	r1, [pc, #104]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262a:	f7fe fc47 	bl	8000ebc <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002632:	f7fe fc43 	bl	8000ebc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	@ 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0d8      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002644:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 80ce 	bne.w	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fc2a 	bl	8000ebc <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800266a:	e00b      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800266c:	f7fe fc26 	bl	8000ebc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d904      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0bb      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002684:	4b5e      	ldr	r3, [pc, #376]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002690:	d0ec      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d02e      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d12a      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ba:	4b51      	ldr	r3, [pc, #324]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ce:	0f1b      	lsrs	r3, r3, #28
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	019a      	lsls	r2, r3, #6
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	4944      	ldr	r1, [pc, #272]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026f6:	4b42      	ldr	r3, [pc, #264]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	493d      	ldr	r1, [pc, #244]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d022      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002724:	d11d      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002726:	4b36      	ldr	r3, [pc, #216]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	0e1b      	lsrs	r3, r3, #24
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002734:	4b32      	ldr	r3, [pc, #200]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	0f1b      	lsrs	r3, r3, #28
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	019a      	lsls	r2, r3, #6
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	431a      	orrs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	071b      	lsls	r3, r3, #28
 800275a:	4929      	ldr	r1, [pc, #164]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d028      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	0e1b      	lsrs	r3, r3, #24
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	019a      	lsls	r2, r3, #6
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	431a      	orrs	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	4917      	ldr	r1, [pc, #92]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	4911      	ldr	r1, [pc, #68]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027cc:	f7fe fb76 	bl	8000ebc <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027d4:	f7fe fb72 	bl	8000ebc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e007      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f2:	d1ef      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e049      	b.n	80028aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f988 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 faa8 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e054      	b.n	8002976 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d022      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f6:	d01d      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a22      	ldr	r2, [pc, #136]	@ (8002988 <HAL_TIM_Base_Start_IT+0xd4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_TIM_Base_Start_IT+0xd8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_TIM_Base_Start_IT+0xdc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_TIM_Base_Start_IT+0xe0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_TIM_Base_Start_IT+0xe4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x80>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_TIM_Base_Start_IT+0xe8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d115      	bne.n	8002960 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xec>)
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d015      	beq.n	8002972 <HAL_TIM_Base_Start_IT+0xbe>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294c:	d011      	beq.n	8002972 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	e008      	b.n	8002972 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e000      	b.n	8002974 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40010400 	.word	0x40010400
 8002998:	40014000 	.word	0x40014000
 800299c:	40001800 	.word	0x40001800
 80029a0:	00010007 	.word	0x00010007

080029a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d020      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0202 	mvn.w	r2, #2
 80029d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9b4 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9a6 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9b7 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0204 	mvn.w	r2, #4
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f98e 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f980 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f991 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0208 	mvn.w	r2, #8
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f968 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f95a 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f96b 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0210 	mvn.w	r2, #16
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f942 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f934 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f945 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd ffac 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fb0b 	bl	8003154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb03 	bl	8003168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00c      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8ff 	bl	8002d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0220 	mvn.w	r2, #32
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 facb 	bl	8003140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b4      	b.n	8002d3a <HAL_TIM_ConfigClockSource+0x186>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_TIM_ConfigClockSource+0x190>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd4>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_TIM_ConfigClockSource+0x172>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b70      	cmp	r3, #112	@ 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa6>
 8002c24:	2b70      	cmp	r3, #112	@ 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b60      	cmp	r3, #96	@ 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x11a>
 8002c2c:	2b60      	cmp	r3, #96	@ 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b50      	cmp	r3, #80	@ 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xfa>
 8002c34:	2b50      	cmp	r3, #80	@ 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b40      	cmp	r3, #64	@ 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x13a>
 8002c3c:	2b40      	cmp	r3, #64	@ 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b30      	cmp	r3, #48	@ 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b30      	cmp	r3, #48	@ 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	f000 f9bb 	bl	8002fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04f      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	f000 f9a4 	bl	8002fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f918 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	@ 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f971 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f937 	bl	8002f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	@ 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f961 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8f8 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	@ 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f951 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f948 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fffeff88 	.word	0xfffeff88

08002d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a46      	ldr	r2, [pc, #280]	@ (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db6:	d00f      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a43      	ldr	r2, [pc, #268]	@ (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a42      	ldr	r2, [pc, #264]	@ (8002ecc <TIM_Base_SetConfig+0x134>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a41      	ldr	r2, [pc, #260]	@ (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a40      	ldr	r2, [pc, #256]	@ (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a35      	ldr	r2, [pc, #212]	@ (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df8:	d027      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d023      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <TIM_Base_SetConfig+0x134>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed8 <TIM_Base_SetConfig+0x140>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <TIM_Base_SetConfig+0x144>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee0 <TIM_Base_SetConfig+0x148>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee4 <TIM_Base_SetConfig+0x14c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee8 <TIM_Base_SetConfig+0x150>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a29      	ldr	r2, [pc, #164]	@ (8002eec <TIM_Base_SetConfig+0x154>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a10      	ldr	r2, [pc, #64]	@ (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	40001800 	.word	0x40001800
 8002ee8:	40001c00 	.word	0x40001c00
 8002eec:	40002000 	.word	0x40002000

08002ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f023 030a 	bic.w	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 0210 	bic.w	r2, r3, #16
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	031b      	lsls	r3, r3, #12
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	431a      	orrs	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e06d      	b.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2f      	ldr	r2, [pc, #188]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a20      	ldr	r2, [pc, #128]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ae:	d01d      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a15      	ldr	r2, [pc, #84]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a15      	ldr	r2, [pc, #84]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10c      	bne.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40010000 	.word	0x40010000
 8003128:	40010400 	.word	0x40010400
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40014000 	.word	0x40014000
 800313c:	40001800 	.word	0x40001800

08003140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e040      	b.n	8003210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fd0e 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	@ 0x24
 80031a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb16 	bl	80037f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8af 	bl	800332c <UART_SetConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01b      	b.n	8003210 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb95 	bl	8003938 <UART_CheckIdleState>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322c:	2b20      	cmp	r3, #32
 800322e:	d177      	bne.n	8003320 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_UART_Transmit+0x24>
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e070      	b.n	8003322 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2221      	movs	r2, #33	@ 0x21
 800324c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324e:	f7fd fe35 	bl	8000ebc <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326c:	d108      	bne.n	8003280 <HAL_UART_Transmit+0x68>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e003      	b.n	8003288 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003288:	e02f      	b.n	80032ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fbf7 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e03b      	b.n	8003322 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	3302      	adds	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e007      	b.n	80032d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1c9      	bne.n	800328a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	@ 0x40
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fbc1 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e005      	b.n	8003322 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4ba6      	ldr	r3, [pc, #664]	@ (80035f0 <UART_SetConfig+0x2c4>)
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	6979      	ldr	r1, [r7, #20]
 8003360:	430b      	orrs	r3, r1
 8003362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a94      	ldr	r2, [pc, #592]	@ (80035f4 <UART_SetConfig+0x2c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d120      	bne.n	80033ea <UART_SetConfig+0xbe>
 80033a8:	4b93      	ldr	r3, [pc, #588]	@ (80035f8 <UART_SetConfig+0x2cc>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d816      	bhi.n	80033e4 <UART_SetConfig+0xb8>
 80033b6:	a201      	add	r2, pc, #4	@ (adr r2, 80033bc <UART_SetConfig+0x90>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033d9 	.word	0x080033d9
 80033c4:	080033d3 	.word	0x080033d3
 80033c8:	080033df 	.word	0x080033df
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e150      	b.n	8003674 <UART_SetConfig+0x348>
 80033d2:	2302      	movs	r3, #2
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e14d      	b.n	8003674 <UART_SetConfig+0x348>
 80033d8:	2304      	movs	r3, #4
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e14a      	b.n	8003674 <UART_SetConfig+0x348>
 80033de:	2308      	movs	r3, #8
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e147      	b.n	8003674 <UART_SetConfig+0x348>
 80033e4:	2310      	movs	r3, #16
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e144      	b.n	8003674 <UART_SetConfig+0x348>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a83      	ldr	r2, [pc, #524]	@ (80035fc <UART_SetConfig+0x2d0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d132      	bne.n	800345a <UART_SetConfig+0x12e>
 80033f4:	4b80      	ldr	r3, [pc, #512]	@ (80035f8 <UART_SetConfig+0x2cc>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d828      	bhi.n	8003454 <UART_SetConfig+0x128>
 8003402:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <UART_SetConfig+0xdc>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800343d 	.word	0x0800343d
 800340c:	08003455 	.word	0x08003455
 8003410:	08003455 	.word	0x08003455
 8003414:	08003455 	.word	0x08003455
 8003418:	08003449 	.word	0x08003449
 800341c:	08003455 	.word	0x08003455
 8003420:	08003455 	.word	0x08003455
 8003424:	08003455 	.word	0x08003455
 8003428:	08003443 	.word	0x08003443
 800342c:	08003455 	.word	0x08003455
 8003430:	08003455 	.word	0x08003455
 8003434:	08003455 	.word	0x08003455
 8003438:	0800344f 	.word	0x0800344f
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e118      	b.n	8003674 <UART_SetConfig+0x348>
 8003442:	2302      	movs	r3, #2
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e115      	b.n	8003674 <UART_SetConfig+0x348>
 8003448:	2304      	movs	r3, #4
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e112      	b.n	8003674 <UART_SetConfig+0x348>
 800344e:	2308      	movs	r3, #8
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e10f      	b.n	8003674 <UART_SetConfig+0x348>
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e10c      	b.n	8003674 <UART_SetConfig+0x348>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a68      	ldr	r2, [pc, #416]	@ (8003600 <UART_SetConfig+0x2d4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d120      	bne.n	80034a6 <UART_SetConfig+0x17a>
 8003464:	4b64      	ldr	r3, [pc, #400]	@ (80035f8 <UART_SetConfig+0x2cc>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800346e:	2b30      	cmp	r3, #48	@ 0x30
 8003470:	d013      	beq.n	800349a <UART_SetConfig+0x16e>
 8003472:	2b30      	cmp	r3, #48	@ 0x30
 8003474:	d814      	bhi.n	80034a0 <UART_SetConfig+0x174>
 8003476:	2b20      	cmp	r3, #32
 8003478:	d009      	beq.n	800348e <UART_SetConfig+0x162>
 800347a:	2b20      	cmp	r3, #32
 800347c:	d810      	bhi.n	80034a0 <UART_SetConfig+0x174>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <UART_SetConfig+0x15c>
 8003482:	2b10      	cmp	r3, #16
 8003484:	d006      	beq.n	8003494 <UART_SetConfig+0x168>
 8003486:	e00b      	b.n	80034a0 <UART_SetConfig+0x174>
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e0f2      	b.n	8003674 <UART_SetConfig+0x348>
 800348e:	2302      	movs	r3, #2
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e0ef      	b.n	8003674 <UART_SetConfig+0x348>
 8003494:	2304      	movs	r3, #4
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e0ec      	b.n	8003674 <UART_SetConfig+0x348>
 800349a:	2308      	movs	r3, #8
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e0e9      	b.n	8003674 <UART_SetConfig+0x348>
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e0e6      	b.n	8003674 <UART_SetConfig+0x348>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	@ (8003604 <UART_SetConfig+0x2d8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d120      	bne.n	80034f2 <UART_SetConfig+0x1c6>
 80034b0:	4b51      	ldr	r3, [pc, #324]	@ (80035f8 <UART_SetConfig+0x2cc>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80034bc:	d013      	beq.n	80034e6 <UART_SetConfig+0x1ba>
 80034be:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c0:	d814      	bhi.n	80034ec <UART_SetConfig+0x1c0>
 80034c2:	2b80      	cmp	r3, #128	@ 0x80
 80034c4:	d009      	beq.n	80034da <UART_SetConfig+0x1ae>
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d810      	bhi.n	80034ec <UART_SetConfig+0x1c0>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <UART_SetConfig+0x1a8>
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d006      	beq.n	80034e0 <UART_SetConfig+0x1b4>
 80034d2:	e00b      	b.n	80034ec <UART_SetConfig+0x1c0>
 80034d4:	2300      	movs	r3, #0
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e0cc      	b.n	8003674 <UART_SetConfig+0x348>
 80034da:	2302      	movs	r3, #2
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e0c9      	b.n	8003674 <UART_SetConfig+0x348>
 80034e0:	2304      	movs	r3, #4
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e0c6      	b.n	8003674 <UART_SetConfig+0x348>
 80034e6:	2308      	movs	r3, #8
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e0c3      	b.n	8003674 <UART_SetConfig+0x348>
 80034ec:	2310      	movs	r3, #16
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e0c0      	b.n	8003674 <UART_SetConfig+0x348>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a44      	ldr	r2, [pc, #272]	@ (8003608 <UART_SetConfig+0x2dc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d125      	bne.n	8003548 <UART_SetConfig+0x21c>
 80034fc:	4b3e      	ldr	r3, [pc, #248]	@ (80035f8 <UART_SetConfig+0x2cc>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800350a:	d017      	beq.n	800353c <UART_SetConfig+0x210>
 800350c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003510:	d817      	bhi.n	8003542 <UART_SetConfig+0x216>
 8003512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003516:	d00b      	beq.n	8003530 <UART_SetConfig+0x204>
 8003518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351c:	d811      	bhi.n	8003542 <UART_SetConfig+0x216>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <UART_SetConfig+0x1fe>
 8003522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003526:	d006      	beq.n	8003536 <UART_SetConfig+0x20a>
 8003528:	e00b      	b.n	8003542 <UART_SetConfig+0x216>
 800352a:	2300      	movs	r3, #0
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e0a1      	b.n	8003674 <UART_SetConfig+0x348>
 8003530:	2302      	movs	r3, #2
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e09e      	b.n	8003674 <UART_SetConfig+0x348>
 8003536:	2304      	movs	r3, #4
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e09b      	b.n	8003674 <UART_SetConfig+0x348>
 800353c:	2308      	movs	r3, #8
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e098      	b.n	8003674 <UART_SetConfig+0x348>
 8003542:	2310      	movs	r3, #16
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e095      	b.n	8003674 <UART_SetConfig+0x348>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <UART_SetConfig+0x2e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d125      	bne.n	800359e <UART_SetConfig+0x272>
 8003552:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <UART_SetConfig+0x2cc>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003558:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800355c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003560:	d017      	beq.n	8003592 <UART_SetConfig+0x266>
 8003562:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003566:	d817      	bhi.n	8003598 <UART_SetConfig+0x26c>
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356c:	d00b      	beq.n	8003586 <UART_SetConfig+0x25a>
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003572:	d811      	bhi.n	8003598 <UART_SetConfig+0x26c>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <UART_SetConfig+0x254>
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357c:	d006      	beq.n	800358c <UART_SetConfig+0x260>
 800357e:	e00b      	b.n	8003598 <UART_SetConfig+0x26c>
 8003580:	2301      	movs	r3, #1
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e076      	b.n	8003674 <UART_SetConfig+0x348>
 8003586:	2302      	movs	r3, #2
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e073      	b.n	8003674 <UART_SetConfig+0x348>
 800358c:	2304      	movs	r3, #4
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e070      	b.n	8003674 <UART_SetConfig+0x348>
 8003592:	2308      	movs	r3, #8
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e06d      	b.n	8003674 <UART_SetConfig+0x348>
 8003598:	2310      	movs	r3, #16
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e06a      	b.n	8003674 <UART_SetConfig+0x348>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <UART_SetConfig+0x2e4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d138      	bne.n	800361a <UART_SetConfig+0x2ee>
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035b6:	d017      	beq.n	80035e8 <UART_SetConfig+0x2bc>
 80035b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035bc:	d82a      	bhi.n	8003614 <UART_SetConfig+0x2e8>
 80035be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c2:	d00b      	beq.n	80035dc <UART_SetConfig+0x2b0>
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c8:	d824      	bhi.n	8003614 <UART_SetConfig+0x2e8>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <UART_SetConfig+0x2aa>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d2:	d006      	beq.n	80035e2 <UART_SetConfig+0x2b6>
 80035d4:	e01e      	b.n	8003614 <UART_SetConfig+0x2e8>
 80035d6:	2300      	movs	r3, #0
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e04b      	b.n	8003674 <UART_SetConfig+0x348>
 80035dc:	2302      	movs	r3, #2
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e048      	b.n	8003674 <UART_SetConfig+0x348>
 80035e2:	2304      	movs	r3, #4
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e045      	b.n	8003674 <UART_SetConfig+0x348>
 80035e8:	2308      	movs	r3, #8
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e042      	b.n	8003674 <UART_SetConfig+0x348>
 80035ee:	bf00      	nop
 80035f0:	efff69f3 	.word	0xefff69f3
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40004400 	.word	0x40004400
 8003600:	40004800 	.word	0x40004800
 8003604:	40004c00 	.word	0x40004c00
 8003608:	40005000 	.word	0x40005000
 800360c:	40011400 	.word	0x40011400
 8003610:	40007800 	.word	0x40007800
 8003614:	2310      	movs	r3, #16
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e02c      	b.n	8003674 <UART_SetConfig+0x348>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a72      	ldr	r2, [pc, #456]	@ (80037e8 <UART_SetConfig+0x4bc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d125      	bne.n	8003670 <UART_SetConfig+0x344>
 8003624:	4b71      	ldr	r3, [pc, #452]	@ (80037ec <UART_SetConfig+0x4c0>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800362e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003632:	d017      	beq.n	8003664 <UART_SetConfig+0x338>
 8003634:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003638:	d817      	bhi.n	800366a <UART_SetConfig+0x33e>
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363e:	d00b      	beq.n	8003658 <UART_SetConfig+0x32c>
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003644:	d811      	bhi.n	800366a <UART_SetConfig+0x33e>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <UART_SetConfig+0x326>
 800364a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800364e:	d006      	beq.n	800365e <UART_SetConfig+0x332>
 8003650:	e00b      	b.n	800366a <UART_SetConfig+0x33e>
 8003652:	2300      	movs	r3, #0
 8003654:	77fb      	strb	r3, [r7, #31]
 8003656:	e00d      	b.n	8003674 <UART_SetConfig+0x348>
 8003658:	2302      	movs	r3, #2
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e00a      	b.n	8003674 <UART_SetConfig+0x348>
 800365e:	2304      	movs	r3, #4
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e007      	b.n	8003674 <UART_SetConfig+0x348>
 8003664:	2308      	movs	r3, #8
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e004      	b.n	8003674 <UART_SetConfig+0x348>
 800366a:	2310      	movs	r3, #16
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e001      	b.n	8003674 <UART_SetConfig+0x348>
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367c:	d15b      	bne.n	8003736 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800367e:	7ffb      	ldrb	r3, [r7, #31]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d828      	bhi.n	80036d6 <UART_SetConfig+0x3aa>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <UART_SetConfig+0x360>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036c1 	.word	0x080036c1
 8003698:	080036d7 	.word	0x080036d7
 800369c:	080036c7 	.word	0x080036c7
 80036a0:	080036d7 	.word	0x080036d7
 80036a4:	080036d7 	.word	0x080036d7
 80036a8:	080036d7 	.word	0x080036d7
 80036ac:	080036cf 	.word	0x080036cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fc58 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 80036b4:	61b8      	str	r0, [r7, #24]
        break;
 80036b6:	e013      	b.n	80036e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b8:	f7fe fc68 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 80036bc:	61b8      	str	r0, [r7, #24]
        break;
 80036be:	e00f      	b.n	80036e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c0:	4b4b      	ldr	r3, [pc, #300]	@ (80037f0 <UART_SetConfig+0x4c4>)
 80036c2:	61bb      	str	r3, [r7, #24]
        break;
 80036c4:	e00c      	b.n	80036e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c6:	f7fe fb7b 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 80036ca:	61b8      	str	r0, [r7, #24]
        break;
 80036cc:	e008      	b.n	80036e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d2:	61bb      	str	r3, [r7, #24]
        break;
 80036d4:	e004      	b.n	80036e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	77bb      	strb	r3, [r7, #30]
        break;
 80036de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d074      	beq.n	80037d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	005a      	lsls	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	d916      	bls.n	8003730 <UART_SetConfig+0x404>
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d212      	bcs.n	8003730 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f023 030f 	bic.w	r3, r3, #15
 8003712:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	b29a      	uxth	r2, r3
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	4313      	orrs	r3, r2
 8003724:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	89fa      	ldrh	r2, [r7, #14]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	e04f      	b.n	80037d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	77bb      	strb	r3, [r7, #30]
 8003734:	e04c      	b.n	80037d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003736:	7ffb      	ldrb	r3, [r7, #31]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d828      	bhi.n	800378e <UART_SetConfig+0x462>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <UART_SetConfig+0x418>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7fe fbfc 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 800376c:	61b8      	str	r0, [r7, #24]
        break;
 800376e:	e013      	b.n	8003798 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe fc0c 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8003774:	61b8      	str	r0, [r7, #24]
        break;
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <UART_SetConfig+0x4c4>)
 800377a:	61bb      	str	r3, [r7, #24]
        break;
 800377c:	e00c      	b.n	8003798 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe fb1f 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8003782:	61b8      	str	r0, [r7, #24]
        break;
 8003784:	e008      	b.n	8003798 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378a:	61bb      	str	r3, [r7, #24]
        break;
 800378c:	e004      	b.n	8003798 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	77bb      	strb	r3, [r7, #30]
        break;
 8003796:	bf00      	nop
    }

    if (pclk != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	085a      	lsrs	r2, r3, #1
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d909      	bls.n	80037cc <UART_SetConfig+0x4a0>
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037be:	d205      	bcs.n	80037cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e001      	b.n	80037d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40007c00 	.word	0x40007c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400

080037f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f2:	d10a      	bne.n	800390a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b098      	sub	sp, #96	@ 0x60
 800393c:	af02      	add	r7, sp, #8
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003948:	f7fd fab8 	bl	8000ebc <HAL_GetTick>
 800394c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b08      	cmp	r3, #8
 800395a:	d12e      	bne.n	80039ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003964:	2200      	movs	r2, #0
 8003966:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f88c 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d021      	beq.n	80039ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398a:	653b      	str	r3, [r7, #80]	@ 0x50
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
 8003996:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800399a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e6      	bne.n	8003976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e062      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d149      	bne.n	8003a5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f856 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03c      	beq.n	8003a5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	623b      	str	r3, [r7, #32]
   return(result);
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a34:	61fa      	str	r2, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	617b      	str	r3, [r7, #20]
   return(result);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e011      	b.n	8003a80 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3758      	adds	r7, #88	@ 0x58
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e04f      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d04b      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd fa0b 	bl	8000ebc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e04e      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d037      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d034      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d031      	beq.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d110      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f838 	bl	8003b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2208      	movs	r2, #8
 8003af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e029      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b14:	d111      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f81e 	bl	8003b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e00f      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0a0      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b095      	sub	sp, #84	@ 0x54
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e6      	bne.n	8003b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d118      	bne.n	8003c0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0310 	bic.w	r3, r3, #16
 8003bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	613b      	str	r3, [r7, #16]
   return(result);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c1e:	bf00      	nop
 8003c20:	3754      	adds	r7, #84	@ 0x54
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <siprintf>:
 8003c2c:	b40e      	push	{r1, r2, r3}
 8003c2e:	b500      	push	{lr}
 8003c30:	b09c      	sub	sp, #112	@ 0x70
 8003c32:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c34:	9002      	str	r0, [sp, #8]
 8003c36:	9006      	str	r0, [sp, #24]
 8003c38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c3c:	4809      	ldr	r0, [pc, #36]	@ (8003c64 <siprintf+0x38>)
 8003c3e:	9107      	str	r1, [sp, #28]
 8003c40:	9104      	str	r1, [sp, #16]
 8003c42:	4909      	ldr	r1, [pc, #36]	@ (8003c68 <siprintf+0x3c>)
 8003c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c48:	9105      	str	r1, [sp, #20]
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	a902      	add	r1, sp, #8
 8003c50:	f000 f994 	bl	8003f7c <_svfiprintf_r>
 8003c54:	9b02      	ldr	r3, [sp, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	b01c      	add	sp, #112	@ 0x70
 8003c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c60:	b003      	add	sp, #12
 8003c62:	4770      	bx	lr
 8003c64:	20000014 	.word	0x20000014
 8003c68:	ffff0208 	.word	0xffff0208

08003c6c <memset>:
 8003c6c:	4402      	add	r2, r0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d100      	bne.n	8003c76 <memset+0xa>
 8003c74:	4770      	bx	lr
 8003c76:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7a:	e7f9      	b.n	8003c70 <memset+0x4>

08003c7c <__errno>:
 8003c7c:	4b01      	ldr	r3, [pc, #4]	@ (8003c84 <__errno+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000014 	.word	0x20000014

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc0 <__libc_init_array+0x38>)
 8003c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc4 <__libc_init_array+0x3c>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	2600      	movs	r6, #0
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	4d0b      	ldr	r5, [pc, #44]	@ (8003cc8 <__libc_init_array+0x40>)
 8003c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ccc <__libc_init_array+0x44>)
 8003c9c:	f000 fc66 	bl	800456c <_init>
 8003ca0:	1b64      	subs	r4, r4, r5
 8003ca2:	10a4      	asrs	r4, r4, #2
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	080045e8 	.word	0x080045e8
 8003cc4:	080045e8 	.word	0x080045e8
 8003cc8:	080045e8 	.word	0x080045e8
 8003ccc:	080045ec 	.word	0x080045ec

08003cd0 <__retarget_lock_acquire_recursive>:
 8003cd0:	4770      	bx	lr

08003cd2 <__retarget_lock_release_recursive>:
 8003cd2:	4770      	bx	lr

08003cd4 <_free_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d041      	beq.n	8003d60 <_free_r+0x8c>
 8003cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce0:	1f0c      	subs	r4, r1, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfb8      	it	lt
 8003ce6:	18e4      	addlt	r4, r4, r3
 8003ce8:	f000 f8e0 	bl	8003eac <__malloc_lock>
 8003cec:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <_free_r+0x90>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	b933      	cbnz	r3, 8003d00 <_free_r+0x2c>
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	6014      	str	r4, [r2, #0]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cfc:	f000 b8dc 	b.w	8003eb8 <__malloc_unlock>
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d908      	bls.n	8003d16 <_free_r+0x42>
 8003d04:	6820      	ldr	r0, [r4, #0]
 8003d06:	1821      	adds	r1, r4, r0
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	bf01      	itttt	eq
 8003d0c:	6819      	ldreq	r1, [r3, #0]
 8003d0e:	685b      	ldreq	r3, [r3, #4]
 8003d10:	1809      	addeq	r1, r1, r0
 8003d12:	6021      	streq	r1, [r4, #0]
 8003d14:	e7ed      	b.n	8003cf2 <_free_r+0x1e>
 8003d16:	461a      	mov	r2, r3
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b10b      	cbz	r3, 8003d20 <_free_r+0x4c>
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	d9fa      	bls.n	8003d16 <_free_r+0x42>
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	1850      	adds	r0, r2, r1
 8003d24:	42a0      	cmp	r0, r4
 8003d26:	d10b      	bne.n	8003d40 <_free_r+0x6c>
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	4401      	add	r1, r0
 8003d2c:	1850      	adds	r0, r2, r1
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	d1e0      	bne.n	8003cf6 <_free_r+0x22>
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	6053      	str	r3, [r2, #4]
 8003d3a:	4408      	add	r0, r1
 8003d3c:	6010      	str	r0, [r2, #0]
 8003d3e:	e7da      	b.n	8003cf6 <_free_r+0x22>
 8003d40:	d902      	bls.n	8003d48 <_free_r+0x74>
 8003d42:	230c      	movs	r3, #12
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	e7d6      	b.n	8003cf6 <_free_r+0x22>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	1821      	adds	r1, r4, r0
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	bf04      	itt	eq
 8003d50:	6819      	ldreq	r1, [r3, #0]
 8003d52:	685b      	ldreq	r3, [r3, #4]
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	bf04      	itt	eq
 8003d58:	1809      	addeq	r1, r1, r0
 8003d5a:	6021      	streq	r1, [r4, #0]
 8003d5c:	6054      	str	r4, [r2, #4]
 8003d5e:	e7ca      	b.n	8003cf6 <_free_r+0x22>
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	20000308 	.word	0x20000308

08003d68 <sbrk_aligned>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003da8 <sbrk_aligned+0x40>)
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	6831      	ldr	r1, [r6, #0]
 8003d70:	4605      	mov	r5, r0
 8003d72:	b911      	cbnz	r1, 8003d7a <sbrk_aligned+0x12>
 8003d74:	f000 fba6 	bl	80044c4 <_sbrk_r>
 8003d78:	6030      	str	r0, [r6, #0]
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f000 fba1 	bl	80044c4 <_sbrk_r>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d103      	bne.n	8003d8e <sbrk_aligned+0x26>
 8003d86:	f04f 34ff 	mov.w	r4, #4294967295
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
 8003d8e:	1cc4      	adds	r4, r0, #3
 8003d90:	f024 0403 	bic.w	r4, r4, #3
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d0f8      	beq.n	8003d8a <sbrk_aligned+0x22>
 8003d98:	1a21      	subs	r1, r4, r0
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f000 fb92 	bl	80044c4 <_sbrk_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d1f2      	bne.n	8003d8a <sbrk_aligned+0x22>
 8003da4:	e7ef      	b.n	8003d86 <sbrk_aligned+0x1e>
 8003da6:	bf00      	nop
 8003da8:	20000304 	.word	0x20000304

08003dac <_malloc_r>:
 8003dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db0:	1ccd      	adds	r5, r1, #3
 8003db2:	f025 0503 	bic.w	r5, r5, #3
 8003db6:	3508      	adds	r5, #8
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	bf38      	it	cc
 8003dbc:	250c      	movcc	r5, #12
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	db01      	blt.n	8003dc8 <_malloc_r+0x1c>
 8003dc4:	42a9      	cmp	r1, r5
 8003dc6:	d904      	bls.n	8003dd2 <_malloc_r+0x26>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ea8 <_malloc_r+0xfc>
 8003dd6:	f000 f869 	bl	8003eac <__malloc_lock>
 8003dda:	f8d8 3000 	ldr.w	r3, [r8]
 8003dde:	461c      	mov	r4, r3
 8003de0:	bb44      	cbnz	r4, 8003e34 <_malloc_r+0x88>
 8003de2:	4629      	mov	r1, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7ff ffbf 	bl	8003d68 <sbrk_aligned>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	4604      	mov	r4, r0
 8003dee:	d158      	bne.n	8003ea2 <_malloc_r+0xf6>
 8003df0:	f8d8 4000 	ldr.w	r4, [r8]
 8003df4:	4627      	mov	r7, r4
 8003df6:	2f00      	cmp	r7, #0
 8003df8:	d143      	bne.n	8003e82 <_malloc_r+0xd6>
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d04b      	beq.n	8003e96 <_malloc_r+0xea>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	eb04 0903 	add.w	r9, r4, r3
 8003e08:	f000 fb5c 	bl	80044c4 <_sbrk_r>
 8003e0c:	4581      	cmp	r9, r0
 8003e0e:	d142      	bne.n	8003e96 <_malloc_r+0xea>
 8003e10:	6821      	ldr	r1, [r4, #0]
 8003e12:	1a6d      	subs	r5, r5, r1
 8003e14:	4629      	mov	r1, r5
 8003e16:	4630      	mov	r0, r6
 8003e18:	f7ff ffa6 	bl	8003d68 <sbrk_aligned>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d03a      	beq.n	8003e96 <_malloc_r+0xea>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	442b      	add	r3, r5
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	bb62      	cbnz	r2, 8003e88 <_malloc_r+0xdc>
 8003e2e:	f8c8 7000 	str.w	r7, [r8]
 8003e32:	e00f      	b.n	8003e54 <_malloc_r+0xa8>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	d420      	bmi.n	8003e7c <_malloc_r+0xd0>
 8003e3a:	2a0b      	cmp	r2, #11
 8003e3c:	d917      	bls.n	8003e6e <_malloc_r+0xc2>
 8003e3e:	1961      	adds	r1, r4, r5
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	bf18      	it	ne
 8003e46:	6059      	strne	r1, [r3, #4]
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	bf08      	it	eq
 8003e4c:	f8c8 1000 	streq.w	r1, [r8]
 8003e50:	5162      	str	r2, [r4, r5]
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	4630      	mov	r0, r6
 8003e56:	f000 f82f 	bl	8003eb8 <__malloc_unlock>
 8003e5a:	f104 000b 	add.w	r0, r4, #11
 8003e5e:	1d23      	adds	r3, r4, #4
 8003e60:	f020 0007 	bic.w	r0, r0, #7
 8003e64:	1ac2      	subs	r2, r0, r3
 8003e66:	bf1c      	itt	ne
 8003e68:	1a1b      	subne	r3, r3, r0
 8003e6a:	50a3      	strne	r3, [r4, r2]
 8003e6c:	e7af      	b.n	8003dce <_malloc_r+0x22>
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	bf0c      	ite	eq
 8003e74:	f8c8 2000 	streq.w	r2, [r8]
 8003e78:	605a      	strne	r2, [r3, #4]
 8003e7a:	e7eb      	b.n	8003e54 <_malloc_r+0xa8>
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	6864      	ldr	r4, [r4, #4]
 8003e80:	e7ae      	b.n	8003de0 <_malloc_r+0x34>
 8003e82:	463c      	mov	r4, r7
 8003e84:	687f      	ldr	r7, [r7, #4]
 8003e86:	e7b6      	b.n	8003df6 <_malloc_r+0x4a>
 8003e88:	461a      	mov	r2, r3
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	d1fb      	bne.n	8003e88 <_malloc_r+0xdc>
 8003e90:	2300      	movs	r3, #0
 8003e92:	6053      	str	r3, [r2, #4]
 8003e94:	e7de      	b.n	8003e54 <_malloc_r+0xa8>
 8003e96:	230c      	movs	r3, #12
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f000 f80c 	bl	8003eb8 <__malloc_unlock>
 8003ea0:	e794      	b.n	8003dcc <_malloc_r+0x20>
 8003ea2:	6005      	str	r5, [r0, #0]
 8003ea4:	e7d6      	b.n	8003e54 <_malloc_r+0xa8>
 8003ea6:	bf00      	nop
 8003ea8:	20000308 	.word	0x20000308

08003eac <__malloc_lock>:
 8003eac:	4801      	ldr	r0, [pc, #4]	@ (8003eb4 <__malloc_lock+0x8>)
 8003eae:	f7ff bf0f 	b.w	8003cd0 <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	20000300 	.word	0x20000300

08003eb8 <__malloc_unlock>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	@ (8003ec0 <__malloc_unlock+0x8>)
 8003eba:	f7ff bf0a 	b.w	8003cd2 <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	20000300 	.word	0x20000300

08003ec4 <__ssputs_r>:
 8003ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	688e      	ldr	r6, [r1, #8]
 8003eca:	461f      	mov	r7, r3
 8003ecc:	42be      	cmp	r6, r7
 8003ece:	680b      	ldr	r3, [r1, #0]
 8003ed0:	4682      	mov	sl, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	d82d      	bhi.n	8003f34 <__ssputs_r+0x70>
 8003ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003edc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ee0:	d026      	beq.n	8003f30 <__ssputs_r+0x6c>
 8003ee2:	6965      	ldr	r5, [r4, #20]
 8003ee4:	6909      	ldr	r1, [r1, #16]
 8003ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eea:	eba3 0901 	sub.w	r9, r3, r1
 8003eee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ef2:	1c7b      	adds	r3, r7, #1
 8003ef4:	444b      	add	r3, r9
 8003ef6:	106d      	asrs	r5, r5, #1
 8003ef8:	429d      	cmp	r5, r3
 8003efa:	bf38      	it	cc
 8003efc:	461d      	movcc	r5, r3
 8003efe:	0553      	lsls	r3, r2, #21
 8003f00:	d527      	bpl.n	8003f52 <__ssputs_r+0x8e>
 8003f02:	4629      	mov	r1, r5
 8003f04:	f7ff ff52 	bl	8003dac <_malloc_r>
 8003f08:	4606      	mov	r6, r0
 8003f0a:	b360      	cbz	r0, 8003f66 <__ssputs_r+0xa2>
 8003f0c:	6921      	ldr	r1, [r4, #16]
 8003f0e:	464a      	mov	r2, r9
 8003f10:	f000 fae8 	bl	80044e4 <memcpy>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	6126      	str	r6, [r4, #16]
 8003f22:	6165      	str	r5, [r4, #20]
 8003f24:	444e      	add	r6, r9
 8003f26:	eba5 0509 	sub.w	r5, r5, r9
 8003f2a:	6026      	str	r6, [r4, #0]
 8003f2c:	60a5      	str	r5, [r4, #8]
 8003f2e:	463e      	mov	r6, r7
 8003f30:	42be      	cmp	r6, r7
 8003f32:	d900      	bls.n	8003f36 <__ssputs_r+0x72>
 8003f34:	463e      	mov	r6, r7
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	f000 faa8 	bl	8004490 <memmove>
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	1b9b      	subs	r3, r3, r6
 8003f44:	60a3      	str	r3, [r4, #8]
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	4433      	add	r3, r6
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f52:	462a      	mov	r2, r5
 8003f54:	f000 fad4 	bl	8004500 <_realloc_r>
 8003f58:	4606      	mov	r6, r0
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d1e0      	bne.n	8003f20 <__ssputs_r+0x5c>
 8003f5e:	6921      	ldr	r1, [r4, #16]
 8003f60:	4650      	mov	r0, sl
 8003f62:	f7ff feb7 	bl	8003cd4 <_free_r>
 8003f66:	230c      	movs	r3, #12
 8003f68:	f8ca 3000 	str.w	r3, [sl]
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e7e9      	b.n	8003f4e <__ssputs_r+0x8a>
	...

08003f7c <_svfiprintf_r>:
 8003f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f80:	4698      	mov	r8, r3
 8003f82:	898b      	ldrh	r3, [r1, #12]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	b09d      	sub	sp, #116	@ 0x74
 8003f88:	4607      	mov	r7, r0
 8003f8a:	460d      	mov	r5, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	d510      	bpl.n	8003fb2 <_svfiprintf_r+0x36>
 8003f90:	690b      	ldr	r3, [r1, #16]
 8003f92:	b973      	cbnz	r3, 8003fb2 <_svfiprintf_r+0x36>
 8003f94:	2140      	movs	r1, #64	@ 0x40
 8003f96:	f7ff ff09 	bl	8003dac <_malloc_r>
 8003f9a:	6028      	str	r0, [r5, #0]
 8003f9c:	6128      	str	r0, [r5, #16]
 8003f9e:	b930      	cbnz	r0, 8003fae <_svfiprintf_r+0x32>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	b01d      	add	sp, #116	@ 0x74
 8003faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fae:	2340      	movs	r3, #64	@ 0x40
 8003fb0:	616b      	str	r3, [r5, #20]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc0:	2330      	movs	r3, #48	@ 0x30
 8003fc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004160 <_svfiprintf_r+0x1e4>
 8003fc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fca:	f04f 0901 	mov.w	r9, #1
 8003fce:	4623      	mov	r3, r4
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd6:	b10a      	cbz	r2, 8003fdc <_svfiprintf_r+0x60>
 8003fd8:	2a25      	cmp	r2, #37	@ 0x25
 8003fda:	d1f9      	bne.n	8003fd0 <_svfiprintf_r+0x54>
 8003fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe0:	d00b      	beq.n	8003ffa <_svfiprintf_r+0x7e>
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ff6b 	bl	8003ec4 <__ssputs_r>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f000 80a7 	beq.w	8004142 <_svfiprintf_r+0x1c6>
 8003ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ff6:	445a      	add	r2, fp
 8003ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 809f 	beq.w	8004142 <_svfiprintf_r+0x1c6>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400e:	f10a 0a01 	add.w	sl, sl, #1
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800401a:	931a      	str	r3, [sp, #104]	@ 0x68
 800401c:	4654      	mov	r4, sl
 800401e:	2205      	movs	r2, #5
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	484e      	ldr	r0, [pc, #312]	@ (8004160 <_svfiprintf_r+0x1e4>)
 8004026:	f7fc f90b 	bl	8000240 <memchr>
 800402a:	9a04      	ldr	r2, [sp, #16]
 800402c:	b9d8      	cbnz	r0, 8004066 <_svfiprintf_r+0xea>
 800402e:	06d0      	lsls	r0, r2, #27
 8004030:	bf44      	itt	mi
 8004032:	2320      	movmi	r3, #32
 8004034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004038:	0711      	lsls	r1, r2, #28
 800403a:	bf44      	itt	mi
 800403c:	232b      	movmi	r3, #43	@ 0x2b
 800403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004042:	f89a 3000 	ldrb.w	r3, [sl]
 8004046:	2b2a      	cmp	r3, #42	@ 0x2a
 8004048:	d015      	beq.n	8004076 <_svfiprintf_r+0xfa>
 800404a:	9a07      	ldr	r2, [sp, #28]
 800404c:	4654      	mov	r4, sl
 800404e:	2000      	movs	r0, #0
 8004050:	f04f 0c0a 	mov.w	ip, #10
 8004054:	4621      	mov	r1, r4
 8004056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800405a:	3b30      	subs	r3, #48	@ 0x30
 800405c:	2b09      	cmp	r3, #9
 800405e:	d94b      	bls.n	80040f8 <_svfiprintf_r+0x17c>
 8004060:	b1b0      	cbz	r0, 8004090 <_svfiprintf_r+0x114>
 8004062:	9207      	str	r2, [sp, #28]
 8004064:	e014      	b.n	8004090 <_svfiprintf_r+0x114>
 8004066:	eba0 0308 	sub.w	r3, r0, r8
 800406a:	fa09 f303 	lsl.w	r3, r9, r3
 800406e:	4313      	orrs	r3, r2
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	46a2      	mov	sl, r4
 8004074:	e7d2      	b.n	800401c <_svfiprintf_r+0xa0>
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9103      	str	r1, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbb      	ittet	lt
 8004082:	425b      	neglt	r3, r3
 8004084:	f042 0202 	orrlt.w	r2, r2, #2
 8004088:	9307      	strge	r3, [sp, #28]
 800408a:	9307      	strlt	r3, [sp, #28]
 800408c:	bfb8      	it	lt
 800408e:	9204      	strlt	r2, [sp, #16]
 8004090:	7823      	ldrb	r3, [r4, #0]
 8004092:	2b2e      	cmp	r3, #46	@ 0x2e
 8004094:	d10a      	bne.n	80040ac <_svfiprintf_r+0x130>
 8004096:	7863      	ldrb	r3, [r4, #1]
 8004098:	2b2a      	cmp	r3, #42	@ 0x2a
 800409a:	d132      	bne.n	8004102 <_svfiprintf_r+0x186>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	9203      	str	r2, [sp, #12]
 80040a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040a8:	3402      	adds	r4, #2
 80040aa:	9305      	str	r3, [sp, #20]
 80040ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004170 <_svfiprintf_r+0x1f4>
 80040b0:	7821      	ldrb	r1, [r4, #0]
 80040b2:	2203      	movs	r2, #3
 80040b4:	4650      	mov	r0, sl
 80040b6:	f7fc f8c3 	bl	8000240 <memchr>
 80040ba:	b138      	cbz	r0, 80040cc <_svfiprintf_r+0x150>
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	eba0 000a 	sub.w	r0, r0, sl
 80040c2:	2240      	movs	r2, #64	@ 0x40
 80040c4:	4082      	lsls	r2, r0
 80040c6:	4313      	orrs	r3, r2
 80040c8:	3401      	adds	r4, #1
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d0:	4824      	ldr	r0, [pc, #144]	@ (8004164 <_svfiprintf_r+0x1e8>)
 80040d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040d6:	2206      	movs	r2, #6
 80040d8:	f7fc f8b2 	bl	8000240 <memchr>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d036      	beq.n	800414e <_svfiprintf_r+0x1d2>
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <_svfiprintf_r+0x1ec>)
 80040e2:	bb1b      	cbnz	r3, 800412c <_svfiprintf_r+0x1b0>
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	3307      	adds	r3, #7
 80040e8:	f023 0307 	bic.w	r3, r3, #7
 80040ec:	3308      	adds	r3, #8
 80040ee:	9303      	str	r3, [sp, #12]
 80040f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040f2:	4433      	add	r3, r6
 80040f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040f6:	e76a      	b.n	8003fce <_svfiprintf_r+0x52>
 80040f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040fc:	460c      	mov	r4, r1
 80040fe:	2001      	movs	r0, #1
 8004100:	e7a8      	b.n	8004054 <_svfiprintf_r+0xd8>
 8004102:	2300      	movs	r3, #0
 8004104:	3401      	adds	r4, #1
 8004106:	9305      	str	r3, [sp, #20]
 8004108:	4619      	mov	r1, r3
 800410a:	f04f 0c0a 	mov.w	ip, #10
 800410e:	4620      	mov	r0, r4
 8004110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004114:	3a30      	subs	r2, #48	@ 0x30
 8004116:	2a09      	cmp	r2, #9
 8004118:	d903      	bls.n	8004122 <_svfiprintf_r+0x1a6>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0c6      	beq.n	80040ac <_svfiprintf_r+0x130>
 800411e:	9105      	str	r1, [sp, #20]
 8004120:	e7c4      	b.n	80040ac <_svfiprintf_r+0x130>
 8004122:	fb0c 2101 	mla	r1, ip, r1, r2
 8004126:	4604      	mov	r4, r0
 8004128:	2301      	movs	r3, #1
 800412a:	e7f0      	b.n	800410e <_svfiprintf_r+0x192>
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	462a      	mov	r2, r5
 8004132:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <_svfiprintf_r+0x1f0>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4638      	mov	r0, r7
 8004138:	f3af 8000 	nop.w
 800413c:	1c42      	adds	r2, r0, #1
 800413e:	4606      	mov	r6, r0
 8004140:	d1d6      	bne.n	80040f0 <_svfiprintf_r+0x174>
 8004142:	89ab      	ldrh	r3, [r5, #12]
 8004144:	065b      	lsls	r3, r3, #25
 8004146:	f53f af2d 	bmi.w	8003fa4 <_svfiprintf_r+0x28>
 800414a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800414c:	e72c      	b.n	8003fa8 <_svfiprintf_r+0x2c>
 800414e:	ab03      	add	r3, sp, #12
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	462a      	mov	r2, r5
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <_svfiprintf_r+0x1f0>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	4638      	mov	r0, r7
 800415a:	f000 f879 	bl	8004250 <_printf_i>
 800415e:	e7ed      	b.n	800413c <_svfiprintf_r+0x1c0>
 8004160:	080045ac 	.word	0x080045ac
 8004164:	080045b6 	.word	0x080045b6
 8004168:	00000000 	.word	0x00000000
 800416c:	08003ec5 	.word	0x08003ec5
 8004170:	080045b2 	.word	0x080045b2

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4616      	mov	r6, r2
 800417a:	4698      	mov	r8, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004184:	4293      	cmp	r3, r2
 8004186:	bfb8      	it	lt
 8004188:	4613      	movlt	r3, r2
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004190:	4607      	mov	r7, r0
 8004192:	460c      	mov	r4, r1
 8004194:	b10a      	cbz	r2, 800419a <_printf_common+0x26>
 8004196:	3301      	adds	r3, #1
 8004198:	6033      	str	r3, [r6, #0]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0699      	lsls	r1, r3, #26
 800419e:	bf42      	ittt	mi
 80041a0:	6833      	ldrmi	r3, [r6, #0]
 80041a2:	3302      	addmi	r3, #2
 80041a4:	6033      	strmi	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	f015 0506 	ands.w	r5, r5, #6
 80041ac:	d106      	bne.n	80041bc <_printf_common+0x48>
 80041ae:	f104 0a19 	add.w	sl, r4, #25
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6832      	ldr	r2, [r6, #0]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	42ab      	cmp	r3, r5
 80041ba:	dc26      	bgt.n	800420a <_printf_common+0x96>
 80041bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	3b00      	subs	r3, #0
 80041c4:	bf18      	it	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d42b      	bmi.n	8004224 <_printf_common+0xb0>
 80041cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041d0:	4641      	mov	r1, r8
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c8      	blx	r9
 80041d6:	3001      	adds	r0, #1
 80041d8:	d01e      	beq.n	8004218 <_printf_common+0xa4>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	6922      	ldr	r2, [r4, #16]
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	bf02      	ittt	eq
 80041e6:	68e5      	ldreq	r5, [r4, #12]
 80041e8:	6833      	ldreq	r3, [r6, #0]
 80041ea:	1aed      	subeq	r5, r5, r3
 80041ec:	68a3      	ldr	r3, [r4, #8]
 80041ee:	bf0c      	ite	eq
 80041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f4:	2500      	movne	r5, #0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bfc4      	itt	gt
 80041fa:	1a9b      	subgt	r3, r3, r2
 80041fc:	18ed      	addgt	r5, r5, r3
 80041fe:	2600      	movs	r6, #0
 8004200:	341a      	adds	r4, #26
 8004202:	42b5      	cmp	r5, r6
 8004204:	d11a      	bne.n	800423c <_printf_common+0xc8>
 8004206:	2000      	movs	r0, #0
 8004208:	e008      	b.n	800421c <_printf_common+0xa8>
 800420a:	2301      	movs	r3, #1
 800420c:	4652      	mov	r2, sl
 800420e:	4641      	mov	r1, r8
 8004210:	4638      	mov	r0, r7
 8004212:	47c8      	blx	r9
 8004214:	3001      	adds	r0, #1
 8004216:	d103      	bne.n	8004220 <_printf_common+0xac>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	3501      	adds	r5, #1
 8004222:	e7c6      	b.n	80041b2 <_printf_common+0x3e>
 8004224:	18e1      	adds	r1, r4, r3
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	2030      	movs	r0, #48	@ 0x30
 800422a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800422e:	4422      	add	r2, r4
 8004230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004238:	3302      	adds	r3, #2
 800423a:	e7c7      	b.n	80041cc <_printf_common+0x58>
 800423c:	2301      	movs	r3, #1
 800423e:	4622      	mov	r2, r4
 8004240:	4641      	mov	r1, r8
 8004242:	4638      	mov	r0, r7
 8004244:	47c8      	blx	r9
 8004246:	3001      	adds	r0, #1
 8004248:	d0e6      	beq.n	8004218 <_printf_common+0xa4>
 800424a:	3601      	adds	r6, #1
 800424c:	e7d9      	b.n	8004202 <_printf_common+0x8e>
	...

08004250 <_printf_i>:
 8004250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	7e0f      	ldrb	r7, [r1, #24]
 8004256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004258:	2f78      	cmp	r7, #120	@ 0x78
 800425a:	4691      	mov	r9, r2
 800425c:	4680      	mov	r8, r0
 800425e:	460c      	mov	r4, r1
 8004260:	469a      	mov	sl, r3
 8004262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004266:	d807      	bhi.n	8004278 <_printf_i+0x28>
 8004268:	2f62      	cmp	r7, #98	@ 0x62
 800426a:	d80a      	bhi.n	8004282 <_printf_i+0x32>
 800426c:	2f00      	cmp	r7, #0
 800426e:	f000 80d2 	beq.w	8004416 <_printf_i+0x1c6>
 8004272:	2f58      	cmp	r7, #88	@ 0x58
 8004274:	f000 80b9 	beq.w	80043ea <_printf_i+0x19a>
 8004278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800427c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004280:	e03a      	b.n	80042f8 <_printf_i+0xa8>
 8004282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004286:	2b15      	cmp	r3, #21
 8004288:	d8f6      	bhi.n	8004278 <_printf_i+0x28>
 800428a:	a101      	add	r1, pc, #4	@ (adr r1, 8004290 <_printf_i+0x40>)
 800428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042fd 	.word	0x080042fd
 8004298:	08004279 	.word	0x08004279
 800429c:	08004279 	.word	0x08004279
 80042a0:	08004279 	.word	0x08004279
 80042a4:	08004279 	.word	0x08004279
 80042a8:	080042fd 	.word	0x080042fd
 80042ac:	08004279 	.word	0x08004279
 80042b0:	08004279 	.word	0x08004279
 80042b4:	08004279 	.word	0x08004279
 80042b8:	08004279 	.word	0x08004279
 80042bc:	080043fd 	.word	0x080043fd
 80042c0:	08004327 	.word	0x08004327
 80042c4:	080043b7 	.word	0x080043b7
 80042c8:	08004279 	.word	0x08004279
 80042cc:	08004279 	.word	0x08004279
 80042d0:	0800441f 	.word	0x0800441f
 80042d4:	08004279 	.word	0x08004279
 80042d8:	08004327 	.word	0x08004327
 80042dc:	08004279 	.word	0x08004279
 80042e0:	08004279 	.word	0x08004279
 80042e4:	080043bf 	.word	0x080043bf
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6032      	str	r2, [r6, #0]
 80042f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042f8:	2301      	movs	r3, #1
 80042fa:	e09d      	b.n	8004438 <_printf_i+0x1e8>
 80042fc:	6833      	ldr	r3, [r6, #0]
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	1d19      	adds	r1, r3, #4
 8004302:	6031      	str	r1, [r6, #0]
 8004304:	0606      	lsls	r6, r0, #24
 8004306:	d501      	bpl.n	800430c <_printf_i+0xbc>
 8004308:	681d      	ldr	r5, [r3, #0]
 800430a:	e003      	b.n	8004314 <_printf_i+0xc4>
 800430c:	0645      	lsls	r5, r0, #25
 800430e:	d5fb      	bpl.n	8004308 <_printf_i+0xb8>
 8004310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004314:	2d00      	cmp	r5, #0
 8004316:	da03      	bge.n	8004320 <_printf_i+0xd0>
 8004318:	232d      	movs	r3, #45	@ 0x2d
 800431a:	426d      	negs	r5, r5
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004320:	4859      	ldr	r0, [pc, #356]	@ (8004488 <_printf_i+0x238>)
 8004322:	230a      	movs	r3, #10
 8004324:	e011      	b.n	800434a <_printf_i+0xfa>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	0608      	lsls	r0, r1, #24
 800432c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004330:	d402      	bmi.n	8004338 <_printf_i+0xe8>
 8004332:	0649      	lsls	r1, r1, #25
 8004334:	bf48      	it	mi
 8004336:	b2ad      	uxthmi	r5, r5
 8004338:	2f6f      	cmp	r7, #111	@ 0x6f
 800433a:	4853      	ldr	r0, [pc, #332]	@ (8004488 <_printf_i+0x238>)
 800433c:	6033      	str	r3, [r6, #0]
 800433e:	bf14      	ite	ne
 8004340:	230a      	movne	r3, #10
 8004342:	2308      	moveq	r3, #8
 8004344:	2100      	movs	r1, #0
 8004346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800434a:	6866      	ldr	r6, [r4, #4]
 800434c:	60a6      	str	r6, [r4, #8]
 800434e:	2e00      	cmp	r6, #0
 8004350:	bfa2      	ittt	ge
 8004352:	6821      	ldrge	r1, [r4, #0]
 8004354:	f021 0104 	bicge.w	r1, r1, #4
 8004358:	6021      	strge	r1, [r4, #0]
 800435a:	b90d      	cbnz	r5, 8004360 <_printf_i+0x110>
 800435c:	2e00      	cmp	r6, #0
 800435e:	d04b      	beq.n	80043f8 <_printf_i+0x1a8>
 8004360:	4616      	mov	r6, r2
 8004362:	fbb5 f1f3 	udiv	r1, r5, r3
 8004366:	fb03 5711 	mls	r7, r3, r1, r5
 800436a:	5dc7      	ldrb	r7, [r0, r7]
 800436c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004370:	462f      	mov	r7, r5
 8004372:	42bb      	cmp	r3, r7
 8004374:	460d      	mov	r5, r1
 8004376:	d9f4      	bls.n	8004362 <_printf_i+0x112>
 8004378:	2b08      	cmp	r3, #8
 800437a:	d10b      	bne.n	8004394 <_printf_i+0x144>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07df      	lsls	r7, r3, #31
 8004380:	d508      	bpl.n	8004394 <_printf_i+0x144>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	6861      	ldr	r1, [r4, #4]
 8004386:	4299      	cmp	r1, r3
 8004388:	bfde      	ittt	le
 800438a:	2330      	movle	r3, #48	@ 0x30
 800438c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004390:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004394:	1b92      	subs	r2, r2, r6
 8004396:	6122      	str	r2, [r4, #16]
 8004398:	f8cd a000 	str.w	sl, [sp]
 800439c:	464b      	mov	r3, r9
 800439e:	aa03      	add	r2, sp, #12
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f7ff fee6 	bl	8004174 <_printf_common>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d14a      	bne.n	8004442 <_printf_i+0x1f2>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	b004      	add	sp, #16
 80043b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	4833      	ldr	r0, [pc, #204]	@ (800448c <_printf_i+0x23c>)
 80043c0:	2778      	movs	r7, #120	@ 0x78
 80043c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	6831      	ldr	r1, [r6, #0]
 80043ca:	061f      	lsls	r7, r3, #24
 80043cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80043d0:	d402      	bmi.n	80043d8 <_printf_i+0x188>
 80043d2:	065f      	lsls	r7, r3, #25
 80043d4:	bf48      	it	mi
 80043d6:	b2ad      	uxthmi	r5, r5
 80043d8:	6031      	str	r1, [r6, #0]
 80043da:	07d9      	lsls	r1, r3, #31
 80043dc:	bf44      	itt	mi
 80043de:	f043 0320 	orrmi.w	r3, r3, #32
 80043e2:	6023      	strmi	r3, [r4, #0]
 80043e4:	b11d      	cbz	r5, 80043ee <_printf_i+0x19e>
 80043e6:	2310      	movs	r3, #16
 80043e8:	e7ac      	b.n	8004344 <_printf_i+0xf4>
 80043ea:	4827      	ldr	r0, [pc, #156]	@ (8004488 <_printf_i+0x238>)
 80043ec:	e7e9      	b.n	80043c2 <_printf_i+0x172>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f023 0320 	bic.w	r3, r3, #32
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	e7f6      	b.n	80043e6 <_printf_i+0x196>
 80043f8:	4616      	mov	r6, r2
 80043fa:	e7bd      	b.n	8004378 <_printf_i+0x128>
 80043fc:	6833      	ldr	r3, [r6, #0]
 80043fe:	6825      	ldr	r5, [r4, #0]
 8004400:	6961      	ldr	r1, [r4, #20]
 8004402:	1d18      	adds	r0, r3, #4
 8004404:	6030      	str	r0, [r6, #0]
 8004406:	062e      	lsls	r6, r5, #24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	d501      	bpl.n	8004410 <_printf_i+0x1c0>
 800440c:	6019      	str	r1, [r3, #0]
 800440e:	e002      	b.n	8004416 <_printf_i+0x1c6>
 8004410:	0668      	lsls	r0, r5, #25
 8004412:	d5fb      	bpl.n	800440c <_printf_i+0x1bc>
 8004414:	8019      	strh	r1, [r3, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	4616      	mov	r6, r2
 800441c:	e7bc      	b.n	8004398 <_printf_i+0x148>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	6032      	str	r2, [r6, #0]
 8004424:	681e      	ldr	r6, [r3, #0]
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	4630      	mov	r0, r6
 800442c:	f7fb ff08 	bl	8000240 <memchr>
 8004430:	b108      	cbz	r0, 8004436 <_printf_i+0x1e6>
 8004432:	1b80      	subs	r0, r0, r6
 8004434:	6060      	str	r0, [r4, #4]
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	2300      	movs	r3, #0
 800443c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004440:	e7aa      	b.n	8004398 <_printf_i+0x148>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	4632      	mov	r2, r6
 8004446:	4649      	mov	r1, r9
 8004448:	4640      	mov	r0, r8
 800444a:	47d0      	blx	sl
 800444c:	3001      	adds	r0, #1
 800444e:	d0ad      	beq.n	80043ac <_printf_i+0x15c>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	079b      	lsls	r3, r3, #30
 8004454:	d413      	bmi.n	800447e <_printf_i+0x22e>
 8004456:	68e0      	ldr	r0, [r4, #12]
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	4298      	cmp	r0, r3
 800445c:	bfb8      	it	lt
 800445e:	4618      	movlt	r0, r3
 8004460:	e7a6      	b.n	80043b0 <_printf_i+0x160>
 8004462:	2301      	movs	r3, #1
 8004464:	4632      	mov	r2, r6
 8004466:	4649      	mov	r1, r9
 8004468:	4640      	mov	r0, r8
 800446a:	47d0      	blx	sl
 800446c:	3001      	adds	r0, #1
 800446e:	d09d      	beq.n	80043ac <_printf_i+0x15c>
 8004470:	3501      	adds	r5, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	9903      	ldr	r1, [sp, #12]
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	42ab      	cmp	r3, r5
 800447a:	dcf2      	bgt.n	8004462 <_printf_i+0x212>
 800447c:	e7eb      	b.n	8004456 <_printf_i+0x206>
 800447e:	2500      	movs	r5, #0
 8004480:	f104 0619 	add.w	r6, r4, #25
 8004484:	e7f5      	b.n	8004472 <_printf_i+0x222>
 8004486:	bf00      	nop
 8004488:	080045bd 	.word	0x080045bd
 800448c:	080045ce 	.word	0x080045ce

08004490 <memmove>:
 8004490:	4288      	cmp	r0, r1
 8004492:	b510      	push	{r4, lr}
 8004494:	eb01 0402 	add.w	r4, r1, r2
 8004498:	d902      	bls.n	80044a0 <memmove+0x10>
 800449a:	4284      	cmp	r4, r0
 800449c:	4623      	mov	r3, r4
 800449e:	d807      	bhi.n	80044b0 <memmove+0x20>
 80044a0:	1e43      	subs	r3, r0, #1
 80044a2:	42a1      	cmp	r1, r4
 80044a4:	d008      	beq.n	80044b8 <memmove+0x28>
 80044a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ae:	e7f8      	b.n	80044a2 <memmove+0x12>
 80044b0:	4402      	add	r2, r0
 80044b2:	4601      	mov	r1, r0
 80044b4:	428a      	cmp	r2, r1
 80044b6:	d100      	bne.n	80044ba <memmove+0x2a>
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c2:	e7f7      	b.n	80044b4 <memmove+0x24>

080044c4 <_sbrk_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4d06      	ldr	r5, [pc, #24]	@ (80044e0 <_sbrk_r+0x1c>)
 80044c8:	2300      	movs	r3, #0
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	f7fc fc32 	bl	8000d38 <_sbrk>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_sbrk_r+0x1a>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_sbrk_r+0x1a>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	200002fc 	.word	0x200002fc

080044e4 <memcpy>:
 80044e4:	440a      	add	r2, r1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ec:	d100      	bne.n	80044f0 <memcpy+0xc>
 80044ee:	4770      	bx	lr
 80044f0:	b510      	push	{r4, lr}
 80044f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fa:	4291      	cmp	r1, r2
 80044fc:	d1f9      	bne.n	80044f2 <memcpy+0xe>
 80044fe:	bd10      	pop	{r4, pc}

08004500 <_realloc_r>:
 8004500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	4680      	mov	r8, r0
 8004506:	4615      	mov	r5, r2
 8004508:	460c      	mov	r4, r1
 800450a:	b921      	cbnz	r1, 8004516 <_realloc_r+0x16>
 800450c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004510:	4611      	mov	r1, r2
 8004512:	f7ff bc4b 	b.w	8003dac <_malloc_r>
 8004516:	b92a      	cbnz	r2, 8004524 <_realloc_r+0x24>
 8004518:	f7ff fbdc 	bl	8003cd4 <_free_r>
 800451c:	2400      	movs	r4, #0
 800451e:	4620      	mov	r0, r4
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004524:	f000 f81a 	bl	800455c <_malloc_usable_size_r>
 8004528:	4285      	cmp	r5, r0
 800452a:	4606      	mov	r6, r0
 800452c:	d802      	bhi.n	8004534 <_realloc_r+0x34>
 800452e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004532:	d8f4      	bhi.n	800451e <_realloc_r+0x1e>
 8004534:	4629      	mov	r1, r5
 8004536:	4640      	mov	r0, r8
 8004538:	f7ff fc38 	bl	8003dac <_malloc_r>
 800453c:	4607      	mov	r7, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d0ec      	beq.n	800451c <_realloc_r+0x1c>
 8004542:	42b5      	cmp	r5, r6
 8004544:	462a      	mov	r2, r5
 8004546:	4621      	mov	r1, r4
 8004548:	bf28      	it	cs
 800454a:	4632      	movcs	r2, r6
 800454c:	f7ff ffca 	bl	80044e4 <memcpy>
 8004550:	4621      	mov	r1, r4
 8004552:	4640      	mov	r0, r8
 8004554:	f7ff fbbe 	bl	8003cd4 <_free_r>
 8004558:	463c      	mov	r4, r7
 800455a:	e7e0      	b.n	800451e <_realloc_r+0x1e>

0800455c <_malloc_usable_size_r>:
 800455c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004560:	1f18      	subs	r0, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfbc      	itt	lt
 8004566:	580b      	ldrlt	r3, [r1, r0]
 8004568:	18c0      	addlt	r0, r0, r3
 800456a:	4770      	bx	lr

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
